{"version":3,"sources":["logo.svg","Show.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","overflowX","table","minWidth","Show","props","classes","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","data","map","row","key","full_name","component","scope","email","accepted","href","id","cache","InMemoryCache","GET_DATA","gql","App","state","client","ApolloClient","link","createHttpLink","uri","this","query","loading","error","console","log","value","val","onChange","s","setState","target","onClick","myPeople","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,+OCUrCC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,UAAW,QAEbC,MAAO,CACLC,SAAU,OAmCCC,EA9BJ,SAACC,GACV,IAAMC,EAAUT,IAEhB,OACE,kBAACU,EAAA,EAAD,CAAOC,UAAWF,EAAQP,MACxB,kBAACU,EAAA,EAAD,CAAOD,UAAWF,EAAQJ,MAAOQ,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,SACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,YACT,kBAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,eAGK,kBAACC,EAAA,EAAD,KACGV,EAAMW,KAAKA,KAAKC,KAAI,SAAAC,GAAG,OACtB,kBAACN,EAAA,EAAD,CAAUO,IAAKD,EAAIE,WACjB,kBAACP,EAAA,EAAD,CAAWQ,UAAU,KAAKC,MAAM,OAC7BJ,EAAIE,WAEP,kBAACP,EAAA,EAAD,CAAWC,MAAM,QAAQI,EAAIK,OAC7B,kBAACV,EAAA,EAAD,CAAWC,MAAM,QAAQI,EAAIM,SAAU,OAAS,SACzD,kBAACX,EAAA,EAAD,CAAWC,MAAM,QAAO,uBAAGW,KAAM,kCAAkCP,EAAIQ,IAA/C,8B,iMChC7B,IAAIC,EAAQ,IAAIC,IAKZC,EAAWC,YAAH,KAiDGC,E,YApCf,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACD2B,MAAM,CACdC,OAAS,IAAIC,IAAa,CAC3BC,KAAMC,YAAe,CACpBC,IAAK,KAENV,WAPmB,E,sEAWV,IAAD,OACN,OAAQ,kBAAC,IAAD,CAAgBM,OAAQK,KAAKN,MAAMC,QACzC,kBAAC,IAAD,CAAOM,MAAOV,IAChB,YAAyB,IAAvBW,EAAsB,EAAtBA,QAAQC,EAAc,EAAdA,MAAMzB,EAAQ,EAARA,KACjB,OAAGwB,EAAgB,sCAChBC,EAAe,6BAAMC,QAAQC,IAAIF,GACpC,2BAAOG,MAAO,EAAKZ,MAAMa,IAAKC,SAAU,SAACC,GAAD,OAAK,EAAKC,SAAS,CAACH,IAAIE,EAAEE,OAAOL,WACzE,4BAAQM,QAAS,kBAAI,EAAKF,SAAS,CAACf,OAAO,IAAIC,IAAa,CAC7DC,KAAMC,YAAe,CACpBC,IAAK,EAAKL,MAAMa,MAEjBlB,cAJC,iBASA,kBAAC,EAAD,CAAMX,KAAMA,EAAKmC,mB,GA5BAC,IAAMC,WChBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAET,kBAAC,EAAD,MAEEC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.581217af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n});\n\n\nconst Show=(props)=>{ \n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell align=\"left\">Email</TableCell>\n            <TableCell align=\"left\">Accepted</TableCell>\n\t\t\t<TableCell align=\"left\">Expa Link</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.data.map(row => (\n            <TableRow key={row.full_name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.full_name}\n              </TableCell>\n              <TableCell align=\"left\">{row.email}</TableCell>\n              <TableCell align=\"left\">{row.accepted? \"true\" : \"false\"}</TableCell>\n\t\t\t  <TableCell align=\"left\"><a href={\"https://expa.aiesec.org/people/\"+row.id}>Expa Profile Link</a></TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\nexport default Show;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {gql} from 'apollo-boost';\nimport {Query} from 'react-apollo';\nimport Show from './Show';\nimport {ApolloProvider} from 'react-apollo';\nimport {createHttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloClient} from 'apollo-boost';\n\nvar cache = new InMemoryCache();\n\n\n\n\nvar GET_DATA = gql`\n\t {\n\t \n myPeople{\n  data{\n    \n    full_name,email,accepted,id\n  },\n  \n}\n\t }\n `;\nclass App extends React.Component {\nconstructor(props) {\n    super(props);\n    this.state={\n\tclient : new ApolloClient({\nlink: createHttpLink({\n\turi: ''\n}),\ncache\n })};\n  }//https://gis-api.aiesec.org/graphql?access_token=b466491602492621d1fd90ea56371f3e0646708f5a02368702f11404d7c56f95\n\nrender(){\n  return (<ApolloProvider client={this.state.client} >\n    <Query query={GET_DATA}>\n\t{({loading,error,data})=>{\n\tif(loading) return <p>loading</p>;\n\tif(error) return (<div>{console.log(error)}\n\t<input value={this.state.val} onChange={(s)=>this.setState({val:s.target.value})}/>\n\t<button onClick={()=>this.setState({client:new ApolloClient({\nlink: createHttpLink({\n\turi: this.state.val\n}),\ncache\n })\n })} >insert token</button>\n\t</div>);\n\treturn (\n\t<Show data={data.myPeople} />\n\t)}\n\t\n\t\n\t}\n\t</Query></ApolloProvider>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n\n \nReactDOM.render(\n\n<App />\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}